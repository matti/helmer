#!/usr/bin/env bash
set -euo pipefail

_echoerr() {
  2>&1 echo "$@"
}
_err() {
  _echoerr "err: $*"
  exit 1
}
_println() {
  1>&2 printf "$*\n"
}

_manifest() {
  manifest_path=$1
  case $manifest_path in
    */helmer.yml)
      :
    ;;
    *)
      manifest_path="$manifest_path/helmer.yml"
    ;;
  esac

  manifest=$(cat "$manifest_path")
  MANIFEST_VERSION=$(echo "$manifest" | yq -e '.version')
  MANIFEST_CHART_REPOSITORY=$(echo "$manifest" | yq -e '.chart.repository')
  MANIFEST_CHART_NAME=$(echo "$manifest" | yq -e '.chart.name')
  MANIFEST_CHART_VERSION=$(echo "$manifest" | yq -e '.chart.version')
  manifest_chart_values_template=$(echo "$manifest" | yq -e '.chart.values')

  MANIFEST_CHART_VALUES=$(echo "$manifest_chart_values_template" | CHART_VERSION="$MANIFEST_CHART_VERSION" envsubst)

  export MANIFEST_VERSION MANIFEST_CHART_REPOSITORY MANIFEST_CHART_NAME MANIFEST_CHART_VERSION MANIFEST_CHART_VALUES
}
subcommand="${1:-}"
instance_path=$2
instance=$(basename "$instance_path")

case $subcommand in
  diff)
    _manifest "$instance_path"

    for dep in curl diff grep; do
      if ! >/dev/null command -v $dep; then
        _err "$dep required"
      fi
    done

    lines=$(
      curl -sfL "$MANIFEST_CHART_VALUES" | diff - "$instance_path/values.yml" || true
    )
    IFS='
'
    for line in $lines; do
      if echo "$line" | >/dev/null grep -E '^\d+'; then
        printf "\n\n"
      fi
      echo "$line"
    done
  ;;
  get)
    while true; do
      output=$(helm list -n "$instance" -q) && break
      sleep 1
    done

    if [ "$output" = "" ]; then
      exit 1
    else
      echo "$output"
    fi
  ;;
  delete)
    while true; do
      $0 get "$instance" || break
      helm delete -n "$instance" "$instance" || true
    done

    while true; do
      kubectl delete namespace --ignore-not-found "$instance" && break
    done
  ;;
  apply)
    _manifest "$2"

    for dep in envsubst helm kubectl; do
      if ! >/dev/null command -v $dep; then
        _err "$dep required"
      fi
    done

    while true; do
      helm repo add "$MANIFEST_CHART_NAME" --force-update "$MANIFEST_CHART_REPOSITORY" && break
      sleep 1
    done

    while true; do
      helm repo update "$MANIFEST_CHART_NAME" && break
      sleep 1
    done

    values=$(envsubst < "$instance_path/values.yml")
    echo "$values"

    while true; do
      echo "$values" | helm upgrade --install \
          "$instance" "$MANIFEST_CHART_NAME/$MANIFEST_CHART_NAME" \
          --create-namespace --namespace "$instance" \
          --version "$MANIFEST_CHART_VERSION" \
          --values - && break

      while true; do
        kubectl delete secret -n "$instance" --field-selector type=helm.sh/release.v1 -l owner=helm --ignore-not-found && break
        sleep 1
      done
    done
  ;;
  *)
    _err "?"
  ;;
esac
